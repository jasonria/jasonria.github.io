<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RIA (Run it again)</title>
  
  <subtitle>Blogging about technologies</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jasonria.github.io/"/>
  <updated>2020-07-03T08:44:39.086Z</updated>
  <id>https://jasonria.github.io/</id>
  
  <author>
    <name>Jason Wan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to log incoming and outgoing messages for ASP.NET Core Bot</title>
    <link href="https://jasonria.github.io/2020/07/How-to-log-incoming-and-outgoing-messages-for-ASP-NET-Core-Bot/"/>
    <id>https://jasonria.github.io/2020/07/How-to-log-incoming-and-outgoing-messages-for-ASP-NET-Core-Bot/</id>
    <published>2020-07-03T07:11:28.000Z</published>
    <updated>2020-07-03T08:44:39.086Z</updated>
    
    <content type="html"><![CDATA[<p>If we want to log all the incoming and outgoing messages for an Azure bot application, we can achieve this goal by implementing a Bot middleware.</p><a id="more"></a><ol><li>Take <a href="https://github.com/microsoft/BotBuilder-Samples/tree/master/samples/csharp_dotnetcore/02.echo-bot" target="_blank" rel="noopener">EchoBot</a> as an example. After downloading the source code and opening it in Visual Studio, let’s create a folder called <strong>Middlewares</strong>, and then create a new .cs file called <strong>MessageInspectorMiddleware.cs</strong>.<br><img src="/images/How_to_log_incoming_and_outgoing_messages_for_aspnetcore_bot/img001.png" alt=""></li></ol><ol start="2"><li>Put the following source code in <strong>MessageInspectorMiddleware.cs</strong>. In <strong>turnContext.OnSendActivities</strong> event handler, we can retrieve the outgoing message which is sent from the bot to the user. In <strong>OnTurnAsync</strong> event but out of the <strong>turnContext.OnSendActivities</strong> event handler, we are able to retrieve the incoming message which is sent from user to bot.<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Bot.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Bot.Builder.Integration.AspNet.Core;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Bot.Connector.Authentication;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Bot.Schema;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.BotBuilderSamples</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageInspectorMiddleware</span> : <span class="title">IMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;MessageInspectorMiddleware&gt; _logger;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MessageInspectorMiddleware</span>(<span class="params">ILogger&lt;MessageInspectorMiddleware&gt; logger = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnTurnAsync</span>(<span class="params">ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken = <span class="keyword">default</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            turnContext.OnSendActivities(<span class="keyword">async</span> (ctx, activities, nextSend) =&gt; </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span>(Activity activity <span class="keyword">in</span> activities)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(activity.Type == ActivityTypes.Message)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// Log the outgoing messages which are sent from bot to user.</span></span><br><span class="line">                        _logger.LogInformation(<span class="string">"===============&gt; Outgoing message: "</span> + JsonConvert.SerializeObject(activity));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> nextSend().ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(turnContext.Activity.Type == ActivityTypes.Message &amp;&amp; !<span class="keyword">string</span>.IsNullOrEmpty(turnContext.Activity.Text))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Log the incoming messages which are sent from user to bot.</span></span><br><span class="line">                _logger.LogInformation(<span class="string">"===============&gt; Incoming message: "</span> + JsonConvert.SerializeObject(turnContext.Activity));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> next(cancellationToken).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>Open <strong>AdapterWithErrorHandler.cs</strong>. Add one more parameter called <strong>MessageInspectorMiddleware messageInspectorMiddleware</strong> for the method AdapterWithErrorHandler(). And then add <strong>Use(messageInspectorMiddleware);</strong> at Line 15.<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Bot.Builder.Integration.AspNet.Core;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Bot.Builder.TraceExtensions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.BotBuilderSamples</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AdapterWithErrorHandler</span> : <span class="title">BotFrameworkHttpAdapter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AdapterWithErrorHandler</span>(<span class="params">IConfiguration configuration, ILogger&lt;BotFrameworkHttpAdapter&gt; logger, MessageInspectorMiddleware messageInspectorMiddleware</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">configuration, logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Use MessageInspector middleware</span></span><br><span class="line">            Use(messageInspectorMiddleware);</span><br><span class="line">            </span><br><span class="line">            OnTurnError = <span class="keyword">async</span> (turnContext, exception) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                logger.LogError(exception, <span class="string">$"[OnTurnError] unhandled error : <span class="subst">&#123;exception.Message&#125;</span>"</span>);</span><br><span class="line">                <span class="keyword">await</span> turnContext.SendActivityAsync(<span class="string">"The bot encountered an error or bug."</span>);</span><br><span class="line">                <span class="keyword">await</span> turnContext.SendActivityAsync(<span class="string">"To continue to run this bot, please fix the bot source code."</span>);</span><br><span class="line">                <span class="keyword">await</span> turnContext.TraceActivityAsync(<span class="string">"OnTurnError Trace"</span>, exception.Message, <span class="string">"https://www.botframework.com/schemas/error"</span>, <span class="string">"TurnError"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>Open <strong>Startup.cs</strong>. Add <strong>services.AddSingleton&lt;MessageInspectorMiddleware&gt;();</strong> at Line 25.<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Bot.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Bot.Builder.Integration.AspNet.Core;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.BotBuilderSamples.Bots;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.BotBuilderSamples</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Configuration = configuration;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create MessageInspectorMiddleware</span></span><br><span class="line">            services.AddSingleton&lt;MessageInspectorMiddleware&gt;();</span><br><span class="line"></span><br><span class="line">            services.AddSingleton&lt;IBotFrameworkHttpAdapter, AdapterWithErrorHandler&gt;();</span><br><span class="line"></span><br><span class="line">            services.AddTransient&lt;IBot, EchoBot&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                app.UseHsts();</span><br><span class="line">            &#125;</span><br><span class="line">            app.UseDefaultFiles();</span><br><span class="line">            app.UseStaticFiles();</span><br><span class="line">            app.UseWebSockets();</span><br><span class="line">            <span class="comment">//app.UseHttpsRedirection();</span></span><br><span class="line">            app.UseMvc();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li>Then you can run the Echobot inside the Visual Studio. Suppose the user sent <strong>Hello World</strong> to the bot. In the Console window, you can see the incoming message <strong>Hello World</strong> as well as the outgoing message <strong>Echo: Hello world</strong> which is sent by the bot to the user in the console output.<br><img src="/images/How_to_log_incoming_and_outgoing_messages_for_aspnetcore_bot/img002.png" alt=""></li></ol><ol start="6"><li>Now we can output all the incoming and outgoing bot messages, the left work is to choose a persistent approach to store the messages. For example you can use SeriLog to log these messages in a txt file on the disk.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If we want to log all the incoming and outgoing messages for an Azure bot application, we can achieve this goal by implementing a Bot middleware.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Azure Bot Framework" scheme="https://jasonria.github.io/tags/Azure-Bot-Framework/"/>
    
  </entry>
  
  <entry>
    <title>x64 calling convention</title>
    <link href="https://jasonria.github.io/2020/05/x64-calling-convention/"/>
    <id>https://jasonria.github.io/2020/05/x64-calling-convention/</id>
    <published>2020-05-17T02:30:04.000Z</published>
    <updated>2020-07-03T06:26:35.880Z</updated>
    
    <content type="html"><![CDATA[<p>This post demonstrates how the functions are called in 64-bit application, espcially how function parameters are passed from the calling function to the called function.</p><!-- [![](/images/x64_calling_convention/D001.png)](http://localhost:4000/2020/05/x64-calling-convention/) --><a id="more"></a><p>X64 application uses a ‘fast call’ calling conversion. The first 4 arguments are passed through registers. The rest goes onto the stack if the arguments are more than 4, much like x86. Typically you will see mov instructions rather than push instructions. And mov instructions here are used to mov some values or arguments into registers and that happens right prior to the call. Push instructions are pushing values or arguments onto the stack.</p><p>The first 4 arguments could also be pushed into Register Home Space, which is nothing more than an area on the stack that is setup by the calling function(the caller). We usually see this happens for applicatoin compiled in debug mode. Since the first 4 parameters are passed via registers but will possibly pushed onto stack, is it wasteful? Not really, this can be used for other purposes. The compiler will make certain decisions and make good use of the home space. It may put values back into home space or it may not. And if it doesn’t, it will use the home space for other purpose.</p><p>Below is the demo code. The funtion _tmain will call Func who has 5 arguments. We compile it in 64bit mode and run it in WinDbg. We break at Line 19 and deassembles the _tmain function and take a look at its complete deassembled code. As we can see right before calling the Func function, the first 4 arguments a1, a2, a3 and a4 are moved to ecx, edx, r8d and r9d respectively. The 5th argument a5 is pushed onto the stack memory at [rsp+20h].<br><img src="/images/x64_calling_convention/C001.png" alt="Demo code"> </p><p>Then we set a break point at Line 11 where is the beginning of the Func. When we hit the break point, we deassembe the Func. As we can see the values of ecx, edx, r8d, r9d are pushed onto the stack memory from [rsp+8h] to [rsp+20h], where is we called the Register Home Space. Note that these operations are done by the called function(the callee).<br><img src="/images/x64_calling_convention/C002.png" alt="Deassembled code of the Func"></p><p>The memory layout should be like below.<br><img src="/images/x64_calling_convention/D002.png" alt="The stack memory layout when the calling function _tmain calls the called function Func"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post demonstrates how the functions are called in 64-bit application, espcially how function parameters are passed from the calling function to the called function.&lt;/p&gt;
&lt;!-- [![](/images/x64_calling_convention/D001.png)](http://localhost:4000/2020/05/x64-calling-convention/) --&gt;
    
    </summary>
    
    
    
      <category term="Assembly Language" scheme="https://jasonria.github.io/tags/Assembly-Language/"/>
    
      <category term="Registers" scheme="https://jasonria.github.io/tags/Registers/"/>
    
      <category term="Calling Convention" scheme="https://jasonria.github.io/tags/Calling-Convention/"/>
    
  </entry>
  
</feed>
